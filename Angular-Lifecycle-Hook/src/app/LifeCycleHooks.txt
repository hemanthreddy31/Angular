The angular life cycle hooks are methods that angular invokes on a directive or a component, as it creates, changes and destroys them


--Component Created

ngOnChanges
ngOnInit
ngDoCheck
ngAfterContentInit
ngAfterContentChecked
ngAfterViewInit
ngAfterViewChecked
ngDestroy

--ComponentCreated

-------ngOnInit LifeCycle Hook

** angular raises ngOnInit hook after it creates the component and update its input properties. 
   this hook is raised after ngOnChanges


** The ngOnInit hook is fired only once i.e during the first change detection cycle. After that, if 
    the input property changes , this hook does not gets called.


**By the time ngOninit gets called, none of the child components or projected contents or view are available at this point 
Hence any property decorated with @ViewChild, @ViewChildren, @ContentChild or @ContentChildren will not be available to use.




-----ngDoCheck LifeCycle Hook


**Angular invokes ngDoCheck hook during every change Detection cycle .This hook is invoked even if there is no change in input bound properties.

** For exmaple: The ngDoCheck lifecycle hook will run if you clicked a button on webpage, which does not do aynthing. But still its an event so the change
    detection cycle will run and execute ngDoCheck hook.

**Angular invokes ngDoCheck lifecycle hook after ngOnChanges & ngOnInit hooks.


**You can use this hook to implement a custom change detection , when ever angular fails to detect any changes
  made to input bound properties

** The ngDoCheck hook is also a great place to use, when you wnat ot execute some code on every change detection cycle.




